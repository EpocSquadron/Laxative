#!/bin/bash

##########################################################
## Define functions                                     ##
##########################################################

# Function to display usage
usage() {
  	cat <<HEREDOC
	Usage:
		`basename $0` (dump|load) [environment_shortname]

	Options:
		dump - Take a dump.
		load - Load a dump.
		wipe - Copy one environment's db to another's.
		debug - Print all of the variables to investigate for errors.

	Description:

HEREDOC
}

# Function for creating dump files.
dump() {
	# # Create a dump of the database schema
	# mysqldump \
	## Connection to localhost
	# 	--host=$HOST \
	# 	--port=$PORT \
	# 	--user=$USER \
	# 	--password=$PASS \
	## Drop everything first - Not drop database
	##  for compatibility with cPanel
	# 	--add-drop-table \
	## Skip commenting, as timestamp changes diff
	#  --skip-comments
	## Make sure to recreate every detail
	# 	--create-options \
	## Use utf8
	# 	--default-character-set=utf8 \
	## Don't dump the data
	# 	--no-data \
	## Save db to schema.sql
	# 	$DB >schema.sql

	mysqldump --host="$HOST" --port="$PORT" --user="$USER" --password="$PASS" --add-drop-table --skip-comments --create-options --default-character-set=utf8 --no-data "$DB" >"$SCHEMA_FILE"

	# # Create a dump of the routines (functions & procedures) only.
	#
	mysqldump --host="$HOST" --port="$PORT" --user="$USER" --password="$PASS" --routines --skip-triggers --no-create-info --no-data --no-create-db --skip-opt "$DB" >"$ROUTINES_FILE"

	# # Create a dump of the actual data
	# mysqldump \
	## Connection to localhost
	# 	--host=$HOST \
	# 	--port=$PORT \
	# 	--user=$USER \
	# 	--password=$PASS \
	## Include column names in inserts
	# 	--complete-insert \
	## Skip commenting, as timestamp changes diff
	#  --skip-comments
	## Make loading faster by delaying index creation
	# 	--disable-keys \
	## Use VALUES (row1), (row2),.. for smaller file, faster insert
	# 	--extended-insert \
	## Don't replicate db and table data
	# 	--no-create-db \
	# 	--no-create-info \
	## Don't buffer rows in case db very large
	# 	--quick \
	##  Split VALUES (),(),...,(); into newline separated
	##  This makes diffs smaller for git.
	# 	$DB | sed 's/),(/),\
	#   (/g'
	## Save db to data.sql
	# >data.sql

	# Create a dump of the actual data
	mysqldump --host="$HOST" --port="$PORT" --user="$USER" --password="$PASS" --complete-insert --skip-comments --disable-keys --extended-insert --no-create-db --no-create-info --quick "$DB" | sed 's/),(/),\
	(/g' >"$DATA_FILE"
}

# Function for loading dump files.
load() {
	# Update the database
	if [ -e "$SCHEMA_FILE" -a -e "$DATA_FILE" ]; then
		mysql --user="$USER" --password="$PASS" --host="$HOST" --port="$PORT" "$DB" < "$SCHEMA_FILE"
		mysql --user="$USER" --password="$PASS" --host="$HOST" --port="$PORT" "$DB" < "$DATA_FILE"
		mysql --user="$USER" --password="$PASS" --host="$HOST" --port="$PORT" "$DB" < "$ROUTINES_FILE"
	else
		echo >&2 "One or both of the schema and data files for this environment do not exist."; exit 1;
	fi
}

# Function for copying one env's dump on top of another's
wipe() {
	cp -f "$SCHEMA_FILE" "$DIR/$ENV_TO-schema.sql"
	cp -f "$DATA_FILE" "$DIR/$ENV_TO-data.sql"
	cp -f "$ROUTINES_FILE" "$DIR/$ENV_TO-routines.sql"
}

# Function for grabbing a config value out of an ee-master-confi configuration file.
# Arg1 File to search.
# Arg2 Keyword of config value to search for.
grab_php_config_value() {
	## Filter comments with sed
	## Remove single-line comments (// or # comment)
	#	s/\/\/.*$//;
	#   s/#.*//
	## Insert newlines before /*
	#	s/\/\*/\
	#	&/;
	## Insert newlines after */
	#	s/\*\//&\
	#	/
	## Remove one-line block comments (/* something */)
	#	/\/\*.*\*\//d;
	## Remove multi-line block comments
	##	(/* line 1
	##	  * line 2 */)
	#	/\/\*/,/\*\//d
	## Strip empty lines
	#	/^\ *$/d
	## Extract variable with grep
	## Lookbehind, but dont match for $1'] = '
	#	(?<=$1\'\]\ \=\ \')
	## Match anything that isn't the closing single quote
	#	([^']+)
	## Lookahead for closing single quote
	#	(?=\')
	sed 's/\/\/.*$//;s/#.*//;s/\/\*/\
	&/;s/\*\//&\
	/' "$1" | sed '/\/\*.*\*\//d;/\/\*/,/\*\//d;/^\ *$/d' | grep -Pio "(?<=$2['\"]\]\ \=\ ['\"])([^'\"]+)(?=['\"])"
}

##########################################################
## Checks before we do any more                         ##
##########################################################

# Check for existence/accessibility of mysql and sed
hash mysql 2>&- || { echo >&2 "Mysql is required but is either not installed or not in your PATH.  Aborting."; exit 1; }
hash mysqldump 2>&- || { echo >&2 "The mysqldump utility is required but is either not installed or not in your PATH.  Aborting."; exit 1; }
hash sed 2>&- || { echo >&2 "The sed utility is required but is either not installed or not in your PATH.  Aborting."; exit 1; }

# Check that user is asking for an action
if [ ! $1 ]; then
	usage
  	exit;
fi

###########################################################
## Set global variables and grab configuration           ##
###########################################################

# Find location of this script so we can save output to correct directory
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Check that user supplied an env -- falback to local
if [ ! $2 ]; then
	ENV="local"
else
	ENV="$2"
fi

# Check if user wants to wipe, look for third argument
if [ -n "${!3}" -a "$1" = "wipe" ]; then
	ENV_TO="$3"
else
	ENV_TO=""
fi

# Set defaults to prevent nonexistence errors.
DEFAULT_HOST="localhost"
DEFAULT_PORT="3306"
DEFAULT_USER="root"
DEFAULT_PASS="root"
DEFAULT_DB="test"

HOST="$DEFAULT_HOST"
PORT="$DEFAULT_PORT"
USER="$DEFAULT_USER"
PASS="$DEFAULT_PASS"
DB="$DEFAULT_DB"

# Path to possible configuration files
EEMASTERCONF_FILE="$DIR/../config/config.$ENV.php"
CI_ENV_CONF_FILE="$DIR/../application/config/$ENV/database.php"
CONF_FILE="$DIR/$ENV.conf"
WHICH_CONF=""

## Grab configuration
if [ -e "$EEMASTERCONF_FILE" ]; then
# Check if ee-master-config exists for this env, then pull form that
	HOST=`grab_php_config_value $EEMASTERCONF_FILE hostname`
	PORT=`grab_php_config_value $EEMASTERCONF_FILE port`
	USER=`grab_php_config_value $EEMASTERCONF_FILE username`
	PASS=`grab_php_config_value $EEMASTERCONF_FILE password`
	DB=`grab_php_config_value $EEMASTERCONF_FILE database`

	# If any of them are now empty, replace with default value
	for VAR in HOST PORT USER PASS DB; do
		if [ "${!VAR}" = "" ]; then
			TMP="DEFAULT_$VAR"
			eval $VAR="${!TMP}"
		fi
	done

	WHICH_CONF="ee-master-config ($EEMASTERCONF_FILE)"
elif [ -e "$CI_ENV_CONF_FILE" ]; then
# Check if ee-master-config exists for this env, then pull form that
	HOST=`grab_php_config_value $CI_ENV_CONF_FILE hostname`
	PORT=`grab_php_config_value $CI_ENV_CONF_FILE port`
	USER=`grab_php_config_value $CI_ENV_CONF_FILE username`
	PASS=`grab_php_config_value $CI_ENV_CONF_FILE password`
	DB=`grab_php_config_value $CI_ENV_CONF_FILE database`

	# If any of them are now empty, replace with default value
	for VAR in HOST PORT USER PASS DB; do
		if [ "${!VAR}" = "" ]; then
			TMP="DEFAULT_$VAR"
			eval $VAR="${!TMP}"
		fi
	done

	WHICH_CONF="codeigniter environment ($CI_ENV_CONF_FILE)"
elif [ -e "$CONF_FILE" ]; then
# Check for configuration file as fallback.
	source "$CONF_FILE"
	WHICH_CONF="lax conf file ($CONF_FILE)"
else
# Error out.
	echo >&2 "Configuration file does not exist."; exit 1;
fi

# Now that we have complete config data, set locations of dump files.
DATA_FILE="$DIR/$ENV-data.sql"
SCHEMA_FILE="$DIR/$ENV-schema.sql"
ROUTINES_FILE="$DIR/$ENV-routines.sql"


###########################################################
## Main logic.                                           ##
###########################################################

case $1 in
	"load")
		load
		;;
	"dump")
		dump
		;;
	"wipe")
		wipe
		;;
	"debug")
		echo "HOST: $HOST"
		echo "PORT: $PORT"
		echo "USER: $USER"
		echo "PASS: $PASS"
		echo "DB: $DB"
		echo "DATA_FILE: $DATA_FILE"
		echo "SCHEMA_FILE: $SCHEMA_FILE"
		echo "EEMASTERCONF_FILE: $EEMASTERCONF_FILE"
		echo "CONF_FILE: $CONF_FILE"
		echo "WHICH_CONF: $WHICH_CONF"
		;;
	*)
		usage
		;;
esac
